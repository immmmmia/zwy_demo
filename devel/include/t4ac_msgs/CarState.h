// Generated by gencpp from file t4ac_msgs/CarState.msg
// DO NOT EDIT!


#ifndef T4AC_MSGS_MESSAGE_CARSTATE_H
#define T4AC_MSGS_MESSAGE_CARSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace t4ac_msgs
{
template <class ContainerAllocator>
struct CarState_
{
  typedef CarState_<ContainerAllocator> Type;

  CarState_()
    : header()
    , manual_mode(false)
    , ready_mode(false)
    , automatic_mode(false)
    , actuated_brake(false)
    , actuated_wheel(false)
    , reverse(false)
    , forward(false)
    , parked(false)  {
    }
  CarState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , manual_mode(false)
    , ready_mode(false)
    , automatic_mode(false)
    , actuated_brake(false)
    , actuated_wheel(false)
    , reverse(false)
    , forward(false)
    , parked(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _manual_mode_type;
  _manual_mode_type manual_mode;

   typedef uint8_t _ready_mode_type;
  _ready_mode_type ready_mode;

   typedef uint8_t _automatic_mode_type;
  _automatic_mode_type automatic_mode;

   typedef uint8_t _actuated_brake_type;
  _actuated_brake_type actuated_brake;

   typedef uint8_t _actuated_wheel_type;
  _actuated_wheel_type actuated_wheel;

   typedef uint8_t _reverse_type;
  _reverse_type reverse;

   typedef uint8_t _forward_type;
  _forward_type forward;

   typedef uint8_t _parked_type;
  _parked_type parked;





  typedef boost::shared_ptr< ::t4ac_msgs::CarState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t4ac_msgs::CarState_<ContainerAllocator> const> ConstPtr;

}; // struct CarState_

typedef ::t4ac_msgs::CarState_<std::allocator<void> > CarState;

typedef boost::shared_ptr< ::t4ac_msgs::CarState > CarStatePtr;
typedef boost::shared_ptr< ::t4ac_msgs::CarState const> CarStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t4ac_msgs::CarState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t4ac_msgs::CarState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::t4ac_msgs::CarState_<ContainerAllocator1> & lhs, const ::t4ac_msgs::CarState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.manual_mode == rhs.manual_mode &&
    lhs.ready_mode == rhs.ready_mode &&
    lhs.automatic_mode == rhs.automatic_mode &&
    lhs.actuated_brake == rhs.actuated_brake &&
    lhs.actuated_wheel == rhs.actuated_wheel &&
    lhs.reverse == rhs.reverse &&
    lhs.forward == rhs.forward &&
    lhs.parked == rhs.parked;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::t4ac_msgs::CarState_<ContainerAllocator1> & lhs, const ::t4ac_msgs::CarState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace t4ac_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::CarState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t4ac_msgs::CarState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::CarState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t4ac_msgs::CarState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::CarState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t4ac_msgs::CarState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t4ac_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6104b11829402233723a0180a9d22973";
  }

  static const char* value(const ::t4ac_msgs::CarState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6104b11829402233ULL;
  static const uint64_t static_value2 = 0x723a0180a9d22973ULL;
};

template<class ContainerAllocator>
struct DataType< ::t4ac_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t4ac_msgs/CarState";
  }

  static const char* value(const ::t4ac_msgs::CarState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t4ac_msgs::CarState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Created by J Felipe Arango - UAH - Robesafe\n"
"\n"
"Header header\n"
"bool manual_mode\n"
"bool ready_mode\n"
"bool automatic_mode\n"
"bool actuated_brake\n"
"bool actuated_wheel\n"
"bool reverse\n"
"bool forward\n"
"bool parked\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::t4ac_msgs::CarState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t4ac_msgs::CarState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.manual_mode);
      stream.next(m.ready_mode);
      stream.next(m.automatic_mode);
      stream.next(m.actuated_brake);
      stream.next(m.actuated_wheel);
      stream.next(m.reverse);
      stream.next(m.forward);
      stream.next(m.parked);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t4ac_msgs::CarState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t4ac_msgs::CarState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "manual_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.manual_mode);
    s << indent << "ready_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_mode);
    s << indent << "automatic_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.automatic_mode);
    s << indent << "actuated_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.actuated_brake);
    s << indent << "actuated_wheel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.actuated_wheel);
    s << indent << "reverse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse);
    s << indent << "forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward);
    s << indent << "parked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parked);
  }
};

} // namespace message_operations
} // namespace ros

#endif // T4AC_MSGS_MESSAGE_CARSTATE_H
